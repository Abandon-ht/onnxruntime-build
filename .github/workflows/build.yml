name: Build

on:
  workflow_dispatch:
  push:
    tags:
      - v*.*.*

env:
  CMAKE_VERSION: ${{ vars.CMAKE_VERSION }}
  PYTHON_VERSION: ${{ vars.PYTHON_VERSION }}
  NODE_VERSION: ${{ vars.NODE_VERSION }}
  XCODE_VERSION: ${{ vars.XCODE_VERSION }}

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build

    strategy:
      fail-fast: false
      matrix:
        include:
          - target: linux-aarch64-static-lib
            build-type: static-lib
            runs-on: buildjet-4vcpu-ubuntu-2204-arm

          - target: linux-x64-static-lib
            build-type: static-lib
            runs-on: ubuntu-latest

          - target: osx-arm64-static-lib
            build-type: static-lib
            runs-on: ghcr.io/cirruslabs/macos-ventura-xcode:${{ vars.XCODE_VERSION }}

          - target: osx-universal2-static-lib
            build-type: static-lib
            runs-on: ghcr.io/cirruslabs/macos-ventura-xcode:${{ vars.XCODE_VERSION }}

          - target: osx-x86_64-static-lib
            build-type: static-lib
            runs-on: macos-latest

          - target: win-x64-static-lib
            build-type: static-lib
            runs-on: windows-2019

          - target: wasm-static-lib
            build-type: wasm-static-lib
            runs-on: ubuntu-latest

          - target: wasm-static-lib-simd
            build-type: wasm-static-lib-simd
            runs-on: ubuntu-latest

          - target: wasm-static-lib-threaded
            build-type: wasm-static-lib-threaded
            runs-on: ubuntu-latest

          - target: wasm-static-lib-simd-threaded
            build-type: wasm-static-lib-simd-threaded
            runs-on: ubuntu-latest

    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup CMake
        uses: lukka/get-cmake@v3.26.0
        with:
          cmakeVersion: ${{ env.CMAKE_VERSION }}

      - name: Setup Python
        id: setup-python
        continue-on-error: true
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python (Linux)
        if: runner.os == 'Linux' && steps.setup-python.outcome	== 'failure'
        run: |
          sudo apt-get update -q -y
          sudo apt-get install software-properties-common
          sudo add-apt-repository ppa:deadsnakes/ppa
          sudo apt-get install -q -y \
            python${{ env.PYTHON_VERSION }} \
            python${{ env.PYTHON_VERSION }}-distutils \
            python${{ env.PYTHON_VERSION }}-venv
          sudo update-alternatives --install /usr/bin/python python /usr/bin/python${{ env.PYTHON_VERSION }} 1

      - name: Install Python (macOS)
        if: runner.os == 'macOS' && steps.setup-python.outcome	== 'failure'
        run: brew install python@${{ env.PYTHON_VERSION }}

      - name: Setup Node
        if: startsWith(matrix.build-type, 'wasm')
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Xcode
        if: runner.os == 'macOS'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: Install Coreutils
        if: runner.os == 'macOS'
        run: brew install coreutils

      - name: Set ONNX Runtime version
        run: |
          if ${{ startsWith(github.ref, 'refs/tags/v') }}; then
            ONNXRUNTIME_VERSION=${GITHUB_REF_NAME#v}
          else
            ONNXRUNTIME_VERSION=$(cat ONNXRUNTIME_VERSION)
          fi
          echo ONNXRUNTIME_VERSION=$ONNXRUNTIME_VERSION >> $GITHUB_ENV
          echo "ONNX Runtime Version: $ONNXRUNTIME_VERSION"

      - name: Set parallel job count
        if: runner.os == 'Linux' && runner.arch == 'ARM64'
        run: echo PARALLEL_JOB_COUNT=2 >> $GITHUB_ENV

      - name: Set Universal 2 build option
        if: startsWith(matrix.target, 'osx-universal2')
        run: echo CMAKE_OPTIONS="-D CMAKE_OSX_ARCHITECTURES=arm64;x86_64" >> $GITHUB_ENV

      - name: Build
        run: ./build-${{ matrix.build-type }}.sh

      - name: Set archive name
        run: echo ARCHIVE_NAME=onnxruntime-${{ matrix.target }}-${{ env.ONNXRUNTIME_VERSION }} >> $GITHUB_ENV

      - name: Archive (UNIX)
        if: runner.os != 'Windows'
        working-directory: output/${{ matrix.build-type }}
        run: tar cvfz ${{ runner.temp }}/${{ env.ARCHIVE_NAME }}.tgz .

      - name: Archive (Windows)
        if: runner.os == 'Windows'
        working-directory: output/${{ matrix.build-type }}
        run: 7z a "${{ runner.temp }}\${{ env.ARCHIVE_NAME }}.zip" .

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ runner.temp }}/${{ env.ARCHIVE_NAME }}.*

  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          body: "Official Release: [ONNX Runtime ${{ github.ref_name }}](https://github.com/microsoft/onnxruntime/releases/tag/${{ github.ref_name }})"
          artifacts: "*/*.*"
          allowUpdates: true
