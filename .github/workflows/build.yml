name: Build

on:
  workflow_dispatch:
  push:
    tags:
      - v*.*.*

defaults:
  run:
    shell: bash

jobs:
  build:
    name: Build

    strategy:
      fail-fast: false
      matrix:
        include:
          - archive-name: onnxruntime-linux-x64-static-lib
            build-type: static-lib
            runs-on: ubuntu-latest

          - archive-name: onnxruntime-osx-x86_64-static-lib
            build-type: static-lib
            runs-on: macos-latest

          - archive-name: onnxruntime-win-x64-static-lib
            build-type: static-lib
            runs-on: windows-latest

          - archive-name: onnxruntime-wasm-static-lib
            build-type: wasm-static-lib
            runs-on: ubuntu-latest

          - archive-name: onnxruntime-wasm-static-lib-simd
            build-type: wasm-static-lib-simd
            runs-on: ubuntu-latest

          - archive-name: onnxruntime-wasm-static-lib-threaded
            build-type: wasm-static-lib-threaded
            runs-on: ubuntu-latest

          - archive-name: onnxruntime-wasm-static-lib-simd-threaded
            build-type: wasm-static-lib-simd-threaded
            runs-on: ubuntu-latest

    runs-on: ${{ matrix.runs-on }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Get ONNX Runtime Version
        run: echo "ONNXRUNTIME_VERSION=$(cat onnxruntime/VERSION_NUMBER)" >> $GITHUB_ENV

      - name: Check Version
        if: startsWith(github.ref, 'refs/tags/v')
        run: if [ "$ONNXRUNTIME_VERSION" != "${GITHUB_REF_NAME#v}" ]; then exit 1; fi

      - name: Install Coreutils
        if: runner.os == 'macOS'
        run: brew install coreutils

      - name: Build
        run: ./build-${{ matrix.build-type }}.sh

      - name: Archive
        if: runner.os != 'Windows'
        working-directory: outputs/${{ matrix.build-type }}
        run: tar cvfz ${{ runner.temp }}/${{ matrix.archive-name }}-${{ env.ONNXRUNTIME_VERSION }}.tgz .

      - name: Archive
        if: runner.os == 'Windows'
        working-directory: outputs/${{ matrix.build-type }}
        run: 7z a ${{ runner.temp }}/${{ matrix.archive-name }}-${{ env.ONNXRUNTIME_VERSION }}.zip .

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.archive-name }}-${{ env.ONNXRUNTIME_VERSION }}
          path: ${{ runner.temp }}/*

  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3

      - name: Release
        uses: ncipollo/release-action@v1
        with:
          body: "Official Release: [ONNX Runtime ${{ env.GITHUB_REF_NAME }}](https://github.com/microsoft/onnxruntime/releases/tag/${{ env.GITHUB_REF_NAME }})"
          artifacts: "*"
          allowUpdates: true
